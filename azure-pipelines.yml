# Azure Pipelines CI/CD configuration for Java (Gradle) project
# Cost-free version with simulated deployment

trigger:
  branches:
    include:
      - dev
      - prod
      - appearance-note-feature

pr:
  branches:
    include:
      - dev
      - prod

variables:
  buildConfiguration: 'Release'

stages:
  # ============================================
  # STAGE 1: BUILD & TEST (CI)
  # ============================================
  - stage: Build
    displayName: 'Build and Test'
    jobs:
      - job: BuildAndTest
        displayName: 'Build and Test Job'
        pool:
          vmImage: 'windows-latest'

        steps:
          # Step 1: Setup JDK 21
          - powershell: |
              Write-Host "Using JDK 21"
              Write-Host "##vso[task.setvariable variable=JAVA_HOME]$env:JAVA_HOME_21_X64"
              $env:JAVA_HOME = $env:JAVA_HOME_21_X64
              $env:Path = "$env:JAVA_HOME\bin;" + $env:Path
              java -version
            displayName: 'Setup JDK 21'

          # Step 2: Gradle build (without tests)
          - script: gradlew.bat clean build -x test --no-daemon
            displayName: 'Gradle clean build'

          # Step 3: Run unit tests
          - task: Gradle@2
            displayName: 'Run unit tests'
            inputs:
              workingDirectory: ''
              gradleWrapperFile: 'gradlew.bat'
              tasks: 'test'
              publishJUnitResults: true
              testResultsFiles: '**/TEST-*.xml'
              testRunTitle: 'Unit Tests - Betterpedia'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.21'

          # Step 4: Publish build artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: 'build/libs'
              artifactName: 'betterpedia-app'
              publishLocation: 'Container'
            displayName: 'Publish JAR artifacts'
            condition: succeededOrFailed()

  # ============================================
  # STAGE 2: SIMULATED DEV DEPLOYMENT
  # ============================================
  - stage: DeployDev
    displayName: 'Deploy to Development (Simulated)'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
    jobs:
      - deployment: SimulateDevDeployment
        displayName: 'Simulate Development Deployment'
        environment: 'development'
        pool:
          vmImage: 'windows-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                # Download artifacts from build stage
                - download: current
                  artifact: betterpedia-app
                  displayName: 'Download JAR file'

                # Simulate deployment validation
                - powershell: |
                    Write-Host "=== SIMULATED DEPLOYMENT TO DEVELOPMENT ==="
                    Write-Host "Target Environment: Development"
                    Write-Host "Deployment Method: Blue-Green Deployment"
                    Write-Host "Application Health Check: Starting..."
                    
                    # Simulate deployment steps
                    $jarFile = Get-ChildItem "$(Pipeline.Workspace)/betterpedia-app/*.jar" | Select-Object -First 1
                    if ($jarFile) {
                        Write-Host "JAR file found: $($jarFile.Name)"
                        Write-Host "JAR size: $([math]::Round($jarFile.Length/1MB, 2)) MB"
                        Write-Host "Deployment package validated"
                    
                        # Simulate configuration validation
                        Write-Host "Environment variables validated"
                        Write-Host "Database connection string verified"
                        Write-Host "SSL certificates checked"
                    
                        # Simulate successful deployment
                        Write-Host "Application deployed successfully"
                        Write-Host "Health check endpoint responding"
                        Write-Host "Application URL: https://betterpedia-dev.example.com"
                        Write-Host "Deployment completed in 45 seconds"
                    
                    } else {
                        Write-Host " JAR file not found"
                        exit 1
                    }
                  displayName: 'Simulate Dev Deployment'

                # Simulate post-deployment testing
                - powershell: |
                    Write-Host "=== POST-DEPLOYMENT VALIDATION ==="
                    Write-Host "Running smoke tests..."
                    Write-Host "Login functionality verified"
                    Write-Host "Appearance settings feature working"
                    Write-Host "Highlight & notes feature working"
                    Write-Host "Database connectivity confirmed"
                    Write-Host "All acceptance criteria passed"
                  displayName: 'Simulate Smoke Tests'

  # ============================================
  # STAGE 3: SIMULATED PROD DEPLOYMENT
  # ============================================
  - stage: DeployProd
    displayName: 'Deploy to Production (Simulated)'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/prod'))
    jobs:
      - deployment: SimulateProdDeployment
        displayName: 'Simulate Production Deployment'
        environment: 'production'
        pool:
          vmImage: 'windows-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                # Download artifacts from build stage
                - download: current
                  artifact: betterpedia-app
                  displayName: 'Download JAR file'

                # Simulate production deployment with extra checks
                - powershell: |
                    Write-Host "=== SIMULATED PRODUCTION DEPLOYMENT ==="
                    Write-Host "Production deployment initiated"
                    Write-Host "Security scan: PASSED"
                    Write-Host "Compliance check: PASSED"
                    Write-Host "⚡ Performance validation: PASSED"
                    
                    $jarFile = Get-ChildItem "$(Pipeline.Workspace)/betterpedia-app/*.jar" | Select-Object -First 1
                    if ($jarFile) {
                        Write-Host "Production-ready JAR validated: $($jarFile.Name)"
                    
                        # Simulate blue-green deployment
                        Write-Host "Blue-Green deployment strategy"
                        Write-Host "Green environment prepared"
                        Write-Host "Application deployed to green environment"
                        Write-Host "Health checks passed on green environment"
                        Write-Host "Traffic routing: Blue → Green"
                        Write-Host "Zero-downtime deployment completed"
                    
                        Write-Host "Production URL: https://betterpedia.example.com"
                        Write-Host "Production deployment completed successfully"
                    
                    } else {
                        Write-Host "Production JAR validation failed"
                        exit 1
                    }
                  displayName: 'Simulate Production Deployment'

                # Simulate production monitoring setup
                - powershell: |
                    Write-Host "=== PRODUCTION MONITORING ==="
                    Write-Host "Application performance monitoring: ACTIVE"
                    Write-Host " Error tracking and alerting: CONFIGURED"
                    Write-Host " Usage analytics: ENABLED"
                    Write-Host " Log aggregation: SETUP COMPLETE"
                    Write-Host " Production environment fully operational"
                  displayName: 'Setup Production Monitoring'

  # ============================================
  # STAGE 4: FEATURE BRANCH TESTING
  # ============================================
  - stage: FeatureBranchTest
    displayName: 'Feature Branch Testing'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/appearance-note-feature'))
    jobs:
      - job: TestFeatureBranch
        displayName: 'Test Feature Branch'
        pool:
          vmImage: 'windows-latest'
        steps:
          - download: current
            artifact: betterpedia-app
            displayName: 'Download JAR file'

          - powershell: |
              Write-Host "=== FEATURE BRANCH VALIDATION ==="
              Write-Host " Feature branch testing completed"
              Write-Host "Build artifact generated successfully"
              Write-Host "Artifact ready for integration testing"
              
              $jarFile = Get-ChildItem "$(Pipeline.Workspace)/betterpedia-app/*.jar" | Select-Object -First 1
              if ($jarFile) {
                  Write-Host "Artifact Details:"
                  Write-Host "   Name: $($jarFile.Name)"
                  Write-Host "   Size: $([math]::Round($jarFile.Length/1MB, 2)) MB"
                  Write-Host "   Created: $($jarFile.CreationTime)"
                  Write-Host "Feature branch ready for merge to dev"
              }
            displayName: 'Feature Branch Validation'